version: 2.1
executors:
  rocky8-fresh_install: &rocky8-fresh_install-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/xdmod-10.5.0-x86_64:rockylinux8.5-0.3
  rocky8-upgrade: &rocky8-upgrade-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/xdmod-ondemand:x86_64-rockylinux8.5-v10.5.0-1.0-01
  rocky8-export-tool: &rocky8-export-tool-executor
    docker:
      - image: rockylinux:8
  alma8-export-tool: &alma8-export-tool-executor
    docker:
      - image: almalinux:8
  rocky9-export-tool: &rocky9-export-tool-executor
    docker:
      - image: rockylinux:9
  alma9-export-tool: &alma9-export-tool-executor
    docker:
      - image: almalinux:9
  ubuntu20_04-export-tool: &ubuntu20_04-export-tool-executor
    docker:
      - image: ubuntu:20.04
  ubuntu22_04-export-tool: &ubuntu22_04-export-tool-executor
    docker:
      - image: ubuntu:22.04
jobs:
  build:
    parameters:
      os:
        type: string
      install-type:
        type: string
    executor: << parameters.os >>-<< parameters.install-type >>
    environment:
      COMPOSER_ALLOW_SUPERUSER: 1
      XDMOD_REALMS: 'jobs,storage,cloud,resourcespecifications'
      XDMOD_IS_CORE: 'yes'
      XDMOD_INSTALL_DIR: /xdmod
      XDMOD_TEST_MODE: << parameters.install-type >>
      XDMOD_SRC_DIR:  ./../xdmod
      REG_TEST_BASE: /../../../../../project/tests/artifacts/regression/current
    steps:
      - checkout
      - run:
          name: Update php module
          command: dnf module -y reset php && dnf module -y enable php:7.4
      - run:
          name: Install PHP 7.4 and PHP module pre-reqs & an updated version of PHP Pear
          command: dnf install -y php libzip-devel php-pear php-devel
      - run:
          name: Install MongoDB Pear module
          command: yes '' | pecl install mongodb || true
      - run:
          name: Update NodeJS version
          command: |
            dnf module -y reset nodejs
            dnf module -y install nodejs:16
      - run:
          name: Checkout XDMoD
          command: |
            git clone --depth=1 --branch=xdmod11.0 https://github.com/ubccr/xdmod.git $XDMOD_SRC_DIR
      - run:
          name: Link the module into the XDMoD Source Directory
          command: |
              ln -s `pwd` $XDMOD_SRC_DIR/open_xdmod/modules/ondemand
      - run:
          name: Install XDMoD Dependencies
          command: composer install -d $XDMOD_SRC_DIR --no-progress
      - run:
          name: Setup Environment Variables
          command: |
            echo "export XDMOD_SOURCE_DIR=${CIRCLE_WORKING_DIRECTORY}/${XDMOD_SRC_DIR}" >> $BASH_ENV
            echo "export SHIPPABLE_BUILD_DIR=${CIRCLE_WORKING_DIRECTORY}" >> $BASH_ENV
      - run:
          name: Build RPMS
          command: |
            pushd $XDMOD_SRC_DIR
            ~/bin/buildrpm xdmod ondemand
            popd
      - run:
          name: Bootstrap XDMoD
          command: $XDMOD_SRC_DIR/tests/ci/bootstrap.sh
      - run:
          name: Ingest OnDemand logs
          command: ./tests/scripts/bootstrap.sh
      - store_artifacts:
          path: /var/log/xdmod
  test-export-tool:
    parameters:
      os:
        type: string
      install-type:
        type: string
    executor: << parameters.os >>-<< parameters.install-type >>
    environment:
      VENV_DIR: /root/xdmod-ondemand-export/env
    steps:
      - when:
          condition:
            or:
              - equal: [ rocky8, << parameters.os >> ]
              - equal: [ alma8, << parameters.os >> ]
              - equal: [ rocky9, << parameters.os >> ]
              - equal: [ alma9, << parameters.os >> ]
          steps:
            - run:
                # This step is needed to make sure the test artifacts are checked out.
                name: Install Git
                command: dnf install git -y
      - when:
          condition:
            or:
              - equal: [ ubuntu20_04, << parameters.os >> ]
              - equal: [ ubuntu22_04, << parameters.os >> ]
          steps:
            - run:
                # This step is needed to make sure the test artifacts are checked out.
                name: Install Git
                command: |
                  apt update
                  apt install git -y
      - checkout
      # Steps below come from https://osc.github.io/ood-documentation/latest/installation/install-software.html
      - when:
          condition:
            or:
              - equal: [ rocky8, << parameters.os >> ]
              - equal: [ alma8, << parameters.os >> ]
          steps:
            - run:
                name: Install OnDemand dependencies
                command: |
                  dnf install 'dnf-command(config-manager)' -y
                  dnf config-manager --set-enabled powertools
                  dnf install epel-release -y
                  dnf module enable ruby:3.0 nodejs:14 -y
      - when:
          condition:
            or:
              - equal: [ rocky9, << parameters.os >> ]
              - equal: [ alma9, << parameters.os >> ]
          steps:
            - run:
                name: Install OnDemand dependencies
                command: |
                  dnf install 'dnf-command(config-manager)' -y
                  dnf config-manager --set-enabled crb
                  dnf install epel-release -y
      - when:
          condition:
            or:
              - equal: [ rocky8, << parameters.os >> ]
              - equal: [ alma8, << parameters.os >> ]
              - equal: [ rocky9, << parameters.os >> ]
              - equal: [ alma9, << parameters.os >> ]
          steps:
              - run:
                  name: Install OnDemand
                  command: |
                    yum install https://yum.osc.edu/ondemand/3.0/ondemand-release-web-3.0-1.noarch.rpm -y
                    yum install ondemand -y
      - when:
          condition:
            or:
              - equal: [ ubuntu20_04, << parameters.os >> ]
              - equal: [ ubuntu22_04, << parameters.os >> ]
          steps:
            - run:
                name: Install OnDemand
                command: |
                  apt install apt-transport-https ca-certificates -y
                  apt install wget -y
                  wget -O /tmp/ondemand-release-web_3.0.0_all.deb https://apt.osc.edu/ondemand/3.0/ondemand-release-web_3.0.0_all.deb
                  apt install /tmp/ondemand-release-web_3.0.0_all.deb
                  apt update
                  DEBIAN_FRONTEND=noninteractive TZ=US/Eastern apt install ondemand -y
            - run:
                name: Install additional Ubuntu dependencies
                command: |
                  python_version=$(python3 --version | awk '{print $2}' | cut -d'.' -f1-2)
                  apt install python${python_version}-venv -y
                  apt install acl cron
                  mkdir /etc/httpd
                  ln -s /var/log/apache2 /etc/httpd/logs
      - run:
          name: Create virtual environment for pip installs
          command: python3 -m venv ${VENV_DIR}
      - run:
          name: Lint
          command: |
            cd tools/xdmod-ondemand-export
            source ${VENV_DIR}/bin/activate
            python3 -m pip install flake8
            flake8 xdmod_ondemand_export/__init__.py tests/
      - run:
          name: Build wheel and run tests
          command: |
            cd tools/xdmod-ondemand-export
            source ${VENV_DIR}/bin/activate
            python3 -m pip install --upgrade pip build setuptools pytest coverage
            python3 -m build --wheel
            python3 -m pip install dist/xdmod_ondemand_export-*-py3-none-any.whl
            timeout 1m coverage run --branch --omit=*simple_web_server.py -m pytest -vvs -o log_cli=true tests/test.py
            coverage report -m --fail-under=100
      - run:
          name: Follow README installation instructions
          command: |
            useradd -m --shell /bin/false xdmod-ondemand-export
            usermod -L xdmod-ondemand-export
            su -c 'python3 -m venv /home/xdmod-ondemand-export/venv' -s /bin/bash xdmod-ondemand-export
            cp /root/project/tools/xdmod-ondemand-export/dist/xdmod_ondemand_export-*-py3-none-any.whl /home/xdmod-ondemand-export
            chown xdmod-ondemand-export:xdmod-ondemand-export /home/xdmod-ondemand-export/xdmod_ondemand_export-*-py3-none-any.whl
            su -c 'source /home/xdmod-ondemand-export/venv/bin/activate && python3 -m pip install /home/xdmod-ondemand-export/xdmod_ondemand_export-*-py3-none-any.whl' -s /bin/bash xdmod-ondemand-export
            (umask 377 && cp /home/xdmod-ondemand-export/venv/lib/python3.*/site-packages/xdmod_ondemand_export/conf.ini /home/xdmod-ondemand-export/)
            # All zeroes for a fake token
            (umask 177 && echo '0.0000000000000000000000000000000000000000000000000000000000000000' > /home/xdmod-ondemand-export/.token)
            (umask 177 && touch /home/xdmod-ondemand-export/last-run.json)
            chown xdmod-ondemand-export:xdmod-ondemand-export /home/xdmod-ondemand-export/{conf.ini,.token,last-run.json}
            setfacl -m u:xdmod-ondemand-export:r-x /etc/httpd/logs
            setfacl -dm u:xdmod-ondemand-export:r-- /etc/httpd/logs
            setfacl -m u:xdmod-ondemand-export:r-- /etc/httpd/logs
            su -c '/home/xdmod-ondemand-export/venv/bin/xdmod-ondemand-export --check-config -l INFO' -s /bin/bash xdmod-ondemand-export

workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              os: [rocky8]
              install-type: ["fresh_install", "upgrade"]
      - test-export-tool:
          matrix:
            parameters:
              os:
                - rocky8
                - alma8
                - rocky9
                - alma9
                - ubuntu20_04
                - ubuntu22_04
              install-type: ["export-tool"]
