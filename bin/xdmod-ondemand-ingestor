#!/usr/bin/env php
<?php
/**
 * Shred, Ingest and Aggregate log files from Open OnDemand
 *
 */

require_once __DIR__ . '/../configuration/linker.php';

use CCR\Log;
use ETL\Configuration\EtlConfiguration;
use ETL\EtlOverseer;
use ETL\EtlOverseerOptions;
use ETL\Utilities;

try {
    main();
} catch (Exception $e) {
    do {
        fwrite(STDERR, $e->getMessage() . "\n");
        fwrite(STDERR, $e->getTraceAsString() . "\n");
    } while ($e = $e->getPrevious());
    exit(1);
}

function main()
{
    global $argv, $logger;

    $opts = array(
        array('h',  'help'),
        array('r:', 'resource:'),
        array('d:', 'dir:'),
        array('i',  'ingest'),
        array('a',  'aggregate'),
        array('q',  'quiet'),
        array('v',  'verbose'),
        array('',   'debug'),
        array('',   'dry-run'),
        array('m:', 'last-modified-start-date:'),
    );

    $shortOptions = implode(
        '',
        array_map(function ($opt) { return $opt[0]; }, $opts)
    );
    $longOptions = array_map(function ($opt) { return $opt[1]; }, $opts);

    $args = getopt($shortOptions, $longOptions);

    if ($args === false) {
        fwrite(STDERR, "Failed to parse arguments\n");
        exit(1);
    }

    $help = false;
    $ingest = null;
    $aggregate = null;
    $dryRun = false;
    $logLevel = -1;
    $last_modified = null;

    $dir = null;
    $resource = null;

    foreach ($args as $key => $value) {
        if (is_array($value)) {
            fwrite(STDERR, "Multiple values not allowed for '$key'\n");
            exit(1);
        }

        switch ($key) {
            case 'h':
            case 'help':
                $help = true;
                break;
            case 'r':
            case 'resource':
                $resource = $value;
                break;
            case 'd':
            case 'dir':
                $dir = $value;
                break;
            case 'i':
            case 'ingest':
                $ingest = true;
                break;
            case 'a':
            case 'aggregate':
                $aggregate = true;
                break;
            case 'q':
            case 'quiet':
                $logLevel = max($logLevel, Log::WARNING);
                break;
            case 'v':
            case 'verbose':
                $logLevel = max($logLevel, Log::INFO);
                break;
            case 'debug':
                $logLevel = max($logLevel, Log::DEBUG);
                break;
            case 'dry-run':
                $dryRun = true;
                break;
            case 'm':
            case 'last-modified-start-date':
                if (strtotime($value) === false) {
                    fwrite(STDERR, "Could not parse last modified start date: '$value'\n");
                    exit(1);
                }
                $last_modified = $value;
                break;
            default:
                fwrite(STDERR, "Unexpected option '$key'\n");
                exit(1);
                break;
        }
    }

    if ($help) {
        displayHelpText();
        exit;
    }

    if ($ingest && (is_null($resource) || is_null($dir))) {
        fwrite(STDERR, "Missing mandatory options\n");
        displayHelpText();
        exit(1);
    }

    if ($logLevel === -1) { $logLevel = Log::NOTICE; }

    $conf = array(
        'file'            => false,
        'mail'            => false,
        'consoleLogLevel' => $logLevel,
    );

    $logger = Log::factory('xdmod-ondemand-ingestor', $conf);

    $cmd = implode(' ', array_map('escapeshellarg', $argv));
    $logger->info("Command: $cmd");

    $process_start_time = date('Y-m-d H:i:s');
    $logger->notice(array(
        'message'            => 'xdmod-ondemand-ingestor start',
        'process_start_time' => $process_start_time
    ));

    if (is_null($ingest) && is_null($aggregate)) {
        $ingest = $aggregate = true;
    } elseif (is_null($ingest)) {
        $ingest = false;
        if (is_null($last_modified)) {
            $logger->err('-a / --aggregate provided without a value provided for -m / --last-modified-start-date');
            exit(1);
        }
    } elseif (is_null($aggregate)) {
        $aggregate = false;
    }

    $siteConfig = \xd_utilities\getConfigurationSection('ondemand-general');

    $geoip_database = CONFIG_DIR . '/etl/etl_data.d/ood/empty.mmdb';
    if ($siteConfig['geoip_database'] != '') {
        $geoip_database = $siteConfig['geoip_database'];
    }

    $processSections = array();
    if ($ingest) {
        array_push($processSections, 'ondemand.log-ingestion');
    }
    if ($aggregate) {
        array_push($processSections, 'ondemand.aggregation');
    }

    $scriptOptions = array(
        'process-sections' => $processSections,
        'last-modified-start-date' => (
            is_null($last_modified) ? $process_start_time : $last_modified
        ),
        'verbosity' => $conf['consoleLogLevel'],
        'option-overrides' => array(),
        'variable-overrides' => array(
            'OOD_LOG_PATH' => $dir,
            'OOD_RESOURCE_CODE' => $resource,
            'APACHE_LOG_FORMAT' => $siteConfig['webserver_format_str'],
            'GEOIP_FILE_PATH' => $geoip_database
        ),
        'default-module-name' => 'xdmod'
    );

    if ($dryRun) {
        $scriptOptions['dryrun'] = true;
    }

    $etlConfig = EtlConfiguration::factory(
        CONFIG_DIR . '/etl/etl.json',
        null,
        $logger,
        array(
            'option_overrides' => $scriptOptions['option-overrides'],
            'config_variables' => $scriptOptions['variable-overrides'],
            'default_module_name' => $scriptOptions['default-module-name']
        )
    );
    Utilities::setEtlConfig($etlConfig);
    $overseerOptions = new EtlOverseerOptions($scriptOptions, $logger);
    $overseer = new EtlOverseer($overseerOptions, $logger);
    $overseer->execute($etlConfig);

    if ($aggregate) {
        $filterListBuilder = new FilterListBuilder($logger);
        $filterListBuilder->buildRealmLists('OnDemand');
    }

    $logger->notice(array(
        'message'          => 'xdmod-ondemand-ingestor end',
        'process_end_time' => date('Y-m-d H:i:s'),
    ));
}

function displayHelpText()
{
    echo <<<'EOF'

Usage: xdmod-ondemand-helper [options]

    -h, --help
        Display this message and exit.

    -r, --resource *resource*
        Specify the resource shortname whose log files are to be shredded.
        Required unless -a / --aggregate is provided and -i / --ingest is not
        provided.

    -d, --dir *directory*
        Specify a directory containing Open OnDemand web server log files to shred.
        Required unless -a / --aggregate is provided and -i / --ingest is not
        provided.

    -i, --ingest
        Only ingest, don't aggregate (unless -a / --aggregate is also provided).

    -a, --aggregate
        Only aggregate, don't ingest (unless -i / --ingest is also provided).
        Requires -m / --last-modified-start-date to also be provided.

    -q, --quiet
        Output warning level logging.

    -v, --verbose
        Output info level logging.

    --debug
        Output debug level logging.

    --dry-run
        Parse log files, but don't insert anything into the database.

    -m, --last-modified-start-date
        Override the datestamp used to determine which rows to process in the database.

EOF;
}
